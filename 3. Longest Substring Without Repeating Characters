Given a string s, find the length of the longest substring without repeating characters.


Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

Code : 

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int l =0, r=0, n = s.size(), ans=0;
        
        unordered_map<char, int> m;
        
        for(; r<n; r++){
            // new element enters and might make the window invalid
            m[s[r]]++;
            for(; m[s[r]]>1; l++){
                // try to make the window valid again
                m[s[l]]--;
                
}
            ans = max(ans, r-l+1);
        }
        return ans;
    }
};
