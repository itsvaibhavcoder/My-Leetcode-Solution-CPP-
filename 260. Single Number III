Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.
You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.

 
Example 1:

Input: nums = [1,2,1,3,2,5]
Output: [3,5]
Explanation:  [5, 3] is also a valid answer.

Example 2:

Input: nums = [-1,0]
Output: [-1,0]

Example 3:

Input: nums = [0,1]
Output: [1,0]
 

Constraints:

2 <= nums.length <= 3 * 104
-231 <= nums[i] <= 231 - 1
Each integer in nums will appear twice, only two integers will appear once.

Code 1 :
class Solution {
public:
    vector<int> singleNumber(vector<int> &nums) {
	sort (nums.begin(), nums.end());
	vector<int> ans;
	int i = 0, n = nums.size();
	while (i < n - 1)
	
		if (nums[i] == nums[i + 1]) i += 2;
		else {
			ans.push_back(nums[i++]);
			if (ans.size() == 2)
				return ans;
		}

	if (ans.size() == 1) 
		ans.push_back(nums.back());
	return ans;
}
};

Code 2 :

class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        int n = nums.size();

				unordered_map<int,int>myMap;
				for(int i=0; i<n; i++){
					myMap[nums[i]]++;
				}

				vector<int>ans;
				for(auto i: myMap){
					if(i.second==1){
						ans.push_back(i.first);
						if(ans.size()==2) return ans;
					}
				}
				return ans;
    }
};

Code 3 :class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        unordered_set<int> numSet; // Create an unordered set to store unique numbers
        
        for (int num : nums) {
            if (numSet.count(num)) { // If the number is already in the set
                numSet.erase(num);   // Remove it (since it's not unique)
            } else {
                numSet.insert(num);  // Otherwise, add it to the set
            }
        }
        
        return vector<int>(numSet.begin(), numSet.end()); // Convert set to vector and return
    }
};

