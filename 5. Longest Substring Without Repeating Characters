Given a string s, find the length of the longest 
substring without repeating characters.

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

Intuition
The sliding window approach helps us efficiently handle the substring and update its boundaries as we iterate through the string, ensuring that we achieve a linear time complexity solution for this problem. The hashmap (unordered_map) allows us to quickly check for repeating characters and adjust the window accordingly.

Approach
Use a sliding window to maintain the substring without repeating characters and use a hashmap to keep track of the characters' positions for quick lookups.

Complexity
Time complexity: O(n)

Space complexity: O(n)

Code
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n = s.length();
        int maxLength = 0;
        unordered_map<char, int> myMap;

    // Initialize the window boundaries
        int left = 0;
        int right = 0;

    while (right < n) {
        char currentChar = s[right];
        
        // Check if the character is already present in the current substring
        if (myMap.find(currentChar) != myMap.end()) {
            // Move the left pointer to the right of the last occurrence of the current character
            left = max(left, myMap[currentChar] + 1);
        }

        // Update the character's position in the hashmap
        myMap[currentChar] = right;

        // Update the maximum length of the substring without repeating characters
        maxLength = max(maxLength, right - left + 1);

        // Move the right pointer to expand the window
        right++;
    }

    return maxLength;

    }
};
