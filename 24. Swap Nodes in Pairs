Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)

 

Example 1:

Input: head = [1,2,3,4]
Output: [2,1,4,3]

Example 2:

Input: head = []
Output: []

Example 3:

Input: head = [1]
Output: [1]
 

Constraints:

The number of nodes in the list is in the range [0, 100].
0 <= Node.val <= 100

Code :

class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode * dummy = new ListNode(0); // create dummy node
        
        dummy->next = head;   // Point the dummy node to the head of the linked list
        
        ListNode *curr = dummy;
        
        while(curr->next && curr->next->next){
            // Nodes to swap
            
            ListNode *first = curr->next;
            ListNode *second = curr->next->next;
            
            // swap Nodes
            first->next = second->next;
            curr->next = second;
            second->next = first;
            // Move curr to the next pair of nodes to swap
            curr = first;
        }
        
        head = dummy->next; // set head to the head of the linked list
        
        delete dummy; // free the memory used by the dummy node
        
        
        return head;
        
    }
};
