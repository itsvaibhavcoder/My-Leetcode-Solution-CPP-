Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

Example 1:
Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]

Example 2:
Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n

Code :

class Solution {
public:
    
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(left == right) return head;
        vector<int> ans;
        ListNode * temp = head;
        while(temp !=NULL){
            ans.push_back(temp->val);
            temp = temp->next;
        }
        temp = head;
        int i = left-1;
        int j = right-1;
        while(i<=j){
            swap(ans[i],ans[j]);
            i++;
            j--;
        }
        ListNode *dummy = new ListNode(0);
        ListNode *temp2 = dummy;
        for(int i=0; i<ans.size(); i++){
            ListNode * newNode = new ListNode(ans[i]);
            temp2->next = newNode;
            temp2=temp2->next;
        }
     return dummy->next;
    }
};
 
