Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:

Input: nums = [1]
Output: [[1]]

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

Code :

class Solution {
public:
    void permuteHelper(vector<int>&nums, int start, int end,  vector<vector<int>> &ans){
      if(start==end){
        ans.push_back(nums);
        return;
      }
      for(int i=start; i<=end; i++){
        swap(nums[start], nums[i]);
        permuteHelper(nums, start+1, end,  ans);
        swap(nums[start], nums[i]);
      }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>>ans;
        int n = nums.size();
        permuteHelper(nums, 0, n-1, ans);
        return ans;
    }
};
