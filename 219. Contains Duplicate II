Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

Example 1:

Input: nums = [1,2,3,1], k = 3
Output: true

Example 2:

Input: nums = [1,0,1,1], k = 1
Output: true

Example 3:

Input: nums = [1,2,3,1,2,3], k = 2
Output: false
 
Constraints:
1 <= nums.length <= 105
-109 <= nums[i] <= 109
0 <= k <= 105

Intuition
The code is trying to determine if there are any duplicate elements in the given vector nums that are within a distance of k indices of each other. In other words, it checks if there are two distinct indices i and j such that nums[i] and nums[j] are equal and |i - j| <= k.

Approach
The code uses an unordered map (myMap) to store the indices of each element encountered while iterating through the vector nums. The key in the map is the element value, and the value is a linked list of indices where that element occurs. As it iterates through nums, it checks if the current element already exists in the map. If so, it then iterates through the list of indices for that element and checks if any of those indices are within the allowed distance k from the current index i. If such a pair of indices is found, it returns true, indicating that there is a duplicate element within the required distance. If no such pair is found during the iteration, it continues by adding the current index to the linked list associated with the current element.

Complexity
Time complexity: O(n*n)
Space complexity: O(n)

Code
class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        int n = nums.size();
        unordered_map<int, list<int>>myMap;
        for(int i=0; i<n; i++){
            if(myMap.find(nums[i]) != myMap.end()){
                for(auto node: myMap[nums[i]]){
                    if(abs(i-node)<=k){
                        return true;
                    }
                }

            }
            myMap[nums[i]].push_back(i);
        }
       return false;

    }
};
