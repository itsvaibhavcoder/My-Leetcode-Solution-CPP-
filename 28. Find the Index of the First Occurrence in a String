Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

 
Example 1:

Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.

Example 2:

Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.
 

Constraints:

1 <= haystack.length, needle.length <= 104
haystack and needle consist of only lowercase English characters.

Code : 

/*
1) n=Length of the substring to find
2) m= Length of the larger string
3)Loop through possible starting positions of the substring in the larger string
4)Check each character of the needle against the corresponding character in the current window of the haystack
5) If characters don't match, break the inner loop and move to the next starting position in the haystack
6) If all characters match and we've reached the end of the needle, return the starting index of the substring
7)If the loop completes without finding the substring, return -1 to indicate no match was found
*/

class Solution {
public:
    int strStr(string haystack, string needle) {
        int n = needle.length();  
        int m = haystack.length();  
        for (int j = 0; j <m; j++) {
            for (int i = 0; i < n; i++) {
                if (needle[i] != haystack[j + i]) {
                    break;
                }
                if (i == n - 1) {
                    return j;
                }
            }
        }
        return -1;
    }
};
